From cae0ac3f5668007385ba7dccabb3f036cc10dcf5 Mon Sep 17 00:00:00 2001
From: Dean Netherton <dean.netherton@gmail.com>
Date: Thu, 23 Apr 2020 20:05:54 +1000
Subject: [PATCH] Audio Control: Added audio control functions

Added new function to que and play notes for a period of time
---
 Source/HBIOS/audio.asm      | 440 ++++++++++++++++++++++++++++++++++++
 Source/HBIOS/cfg_dyno.asm   |   1 +
 Source/HBIOS/cfg_ezz80.asm  |   1 +
 Source/HBIOS/cfg_master.asm |   1 +
 Source/HBIOS/cfg_mk4.asm    |   1 +
 Source/HBIOS/cfg_n8.asm     |   1 +
 Source/HBIOS/cfg_rcz180.asm |   1 +
 Source/HBIOS/cfg_rcz80.asm  |   1 +
 Source/HBIOS/cfg_sbc.asm    |   1 +
 Source/HBIOS/cfg_scz180.asm |   1 +
 Source/HBIOS/cfg_zeta.asm   |   1 +
 Source/HBIOS/cfg_zeta2.asm  |   1 +
 Source/HBIOS/hbios.asm      |  29 ++-
 Source/HBIOS/hbios.inc      |  15 ++
 14 files changed, 493 insertions(+), 2 deletions(-)
 create mode 100644 Source/HBIOS/audio.asm

diff --git a/Source/HBIOS/audio.asm b/Source/HBIOS/audio.asm
new file mode 100644
index 0000000..68f4110
--- /dev/null
+++ b/Source/HBIOS/audio.asm
@@ -0,0 +1,440 @@
+;======================================================================
+;	HBIOS AUDIO CONTROL
+;
+;	WRITTEN BY: DEAN NETHERTON
+;======================================================================
+;
+; TODO:
+;
+;======================================================================
+; CONSTANTS
+;======================================================================
+;
+
+QUEUED_CMD	.EQU	0
+QUEUED_FLAGS	.EQU	QUEUED_CMD
+QUEUED_CHAN	.EQU	QUEUED_CMD + 1		; 1 byte for channel - top bit indicates currently playing/or queued for playing
+QUEUED_VOL	.EQU	QUEUED_CMD + 2		; 1 byte for vol
+QUEUED_PIT	.EQU	QUEUED_CMD + 3		; 2 byte for pit
+QUEUED_DUR	.EQU	QUEUED_CMD + 6		; 2 byte for duration
+QUEUED_TAR	.EQU	QUEUED_CMD + 8		; 2 byte for target time
+QUEUED_CMD_SIZE	.EQU	QUEUED_CMD + 10
+
+QUEUED_CMD_CNT	.EQU	4			; MAX NUMBER OF QUEUED COMMANDS
+
+AUD_BFFREE	.EQU	0			; IF ALL BITS UNSET - BUFFER IS FREE
+AUD_BFALLOC	.EQU	1			; BUFFER HAS BEEN CLAIMED FOR USE.  		NEXT STATE -> AUD_BFPLAY OR AUD_BFQUED
+AUD_BFPLAY	.EQU	2			; BUFFER IS ALLOCATED AND PLAYING NOW. 		NEXT STATE -> AUD_BFFREE
+AUD_BFQUED	.EQU	3			; BUFFER IS ALLOCATED AND WAITING TO PLAY	NEXT STATE -> AUD_BFPLAY
+
+AUD_BMFREE	.EQU	$00
+AUD_BMALLOC	.EQU	$01			; AUD_BFALLOC
+AUD_BMACTIVE	.EQU	$06			; AUD_BFPLAY | AUD_BFQUED
+AUD_BMPLAY	.EQU	$02			; AUD_BFPLAY
+AUD_BMQUEUD	.EQU	$04			; AUD_BFQUED
+
+#include "audio.inc"
+
+AUDIO_INIT:
+	LD	HL, QUEUE_CMDBUF
+	LD	(QUEUE_CMD_WORK), HL
+
+	LD	HL,(VEC_TICK+1)	; GET CUR SECONDS VECTOR
+	LD	(NEXTTIMHOOK),HL		; SAVE IT INTERNALLY
+	LD	HL,AUD_TIMER		; OUR SECONDS INT ENTRY
+	LD	(VEC_TICK+1),HL	; REPLACE IT
+	RET
+
+AUD_DISPATCH:
+	PUSH	IY
+	LD	A, B
+	CP 	BF_AUDRESET
+	JR	Z, AUD_RESET
+	CP	BF_AUDVOL
+	JP	Z, AUD_VOL
+	CP	BF_AUDPIT
+	JP	Z, AUD_PIT
+	CP	BF_AUDPLAY
+	JP	Z, AUD_PLAY
+	CP	BF_AUDQUERY
+	JP	Z, AUD_QUERY
+	CP	BF_AUDDUR
+	JP	Z, AUD_DURATION
+	POP	IY
+	OR	$FF
+	RET
+
+AUD_RESET:
+	LD	B, BF_SNDRESET
+	CALL	SND_DISPATCH
+	POP	IY
+	RET
+
+AUD_VOL:
+	CALL	GET_NXTBUFF
+	LD	A, L
+	LD	(IY + QUEUED_VOL), A
+	XOR	A
+	POP	IY
+	RET
+
+AUD_PIT:
+	CALL	GET_NXTBUFF
+	LD	(IY + QUEUED_PIT), L
+	LD	(IY + QUEUED_PIT + 1), H
+	XOR	A
+	POP	IY
+	RET
+
+AUD_PLAY:
+	CALL	GET_CURBUFF
+	LD	A, (IY + QUEUED_FLAGS)
+	AND	AUD_BMPLAY | AUD_BMQUEUD
+	JR	NZ, AUD_PLAY2
+
+	LD	A, D
+	LD	(IY + QUEUED_CHAN), A
+
+	CALL	TST_PLAYING
+	JR	NZ, AUD_PLAYNXT
+	LD	(IY + QUEUED_FLAGS), AUD_BMQUEUD | AUD_BMALLOC
+	JR	AUD_PLAY1
+
+AUD_PLAYNXT:
+	LD	B, BF_SNDVOL
+	LD	C, 0
+	LD	H, 0
+	LD	A, (IY + QUEUED_VOL)
+	LD	L, A
+	CALL	SND_DISPATCH
+
+	LD	B, BF_SNDPIT
+	LD	C, 0
+	LD	L, (IY + QUEUED_PIT)
+	LD	H, (IY + QUEUED_PIT + 1)
+	CALL	SND_DISPATCH
+
+	LD	B, BF_SNDPLAY
+	LD	C, 0
+	LD	D, (IY + QUEUED_CHAN)
+	CALL	SND_DISPATCH
+
+	CALL	AUD_STARTDUR
+
+AUD_PLAY1:
+	POP	IY
+	XOR	A
+	RET
+
+AUD_PLAY2:
+	POP	IY
+	OR	$FF
+	RET
+
+AUD_QUERY:
+	CALL	GET_CURBUFF
+	LD	A, D			; SUB FUNCTION IN D
+	CP	AUD_SFLAGS
+	JR	Z, AUD_GFLAGS
+	CP	AUD_SPITCH
+	JR	Z, AUD_GPITCH
+	CP	AUD_SVOLUME
+	JR	Z, AUD_GVOLUME
+	CP	AUD_SDURATION
+	JR	Z, AUD_GDURATION
+	CP	AUD_STARGETTIME
+	JR	Z, AUD_GTARGETTIME
+
+	POP	IY
+	OR	$FF
+	RET
+
+AUD_GFLAGS:
+	LD	H, 0
+	LD	L, (IY + QUEUED_FLAGS)
+	JR	AUD_QUERY2
+
+AUD_GPITCH:
+	LD	L, (IY + QUEUED_PIT)
+	LD	H, (IY + QUEUED_PIT + 1)
+	JR	AUD_QUERY2
+AUD_GVOLUME:
+	LD	L, (IY + QUEUED_VOL)
+	LD	H, 0
+	JR	AUD_QUERY2
+AUD_GDURATION:
+	LD	L, (IY + QUEUED_DUR)
+	LD	H, (IY + QUEUED_DUR + 1)
+	JR	AUD_QUERY2
+AUD_GTARGETTIME:
+	LD	L, (IY + QUEUED_TAR)
+	LD	H, (IY + QUEUED_TAR + 1)
+
+AUD_QUERY2:
+	POP	IY
+	XOR	A
+	RET
+
+AUD_DURATION:
+	CALL	GET_NXTBUFF
+
+	LD	(IY + QUEUED_DUR), L
+	LD	(IY + QUEUED_DUR + 1), H
+	LD	(IY + QUEUED_TAR), L
+	LD	(IY + QUEUED_TAR + 1), H
+
+	POP	IY
+	XOR	A
+	RET
+
+; -------------------------------
+
+AUD_STARTDUR:
+	LD	(IY + QUEUED_FLAGS), AUD_BMPLAY | AUD_BMALLOC
+	RET
+
+GET_NXTBUFF:
+	PUSH	HL
+	PUSH	DE
+	PUSH	BC
+	LD	HL, (QUEUE_CMD_WORK)
+	LD	B, QUEUED_CMD_CNT
+
+GET_NXTBUFF1:
+	LD	A, (HL)
+	AND	AUD_BMACTIVE		; IS CURRENTLY USED
+	JR	NZ, GET_NXTBUFF2
+
+	LD	(QUEUE_CMD_WORK), HL
+	LD	(HL), AUD_BMALLOC	; ALLOC THIS BUFFER - BUT NOT YET ACTIVE
+
+	PUSH	HL
+	POP	IY
+
+	POP	BC
+	POP	DE
+	POP	HL
+	XOR	A			; RETURN Z -- FREE BUFFER
+	RET
+
+
+GET_NXTBUFF2:
+	CALL	AUD_BUFFER_INC
+	DEC	B
+	JR	NZ, GET_NXTBUFF1
+
+	POP	BC
+	POP	DE
+	POP	HL
+	POP	IY			; RETURN ADDRESS OF CALLING HBIOS FUNCTION - THROW AWAY AND ABORT CALL WITH ERROR
+	POP	IY
+
+	OR	$FF			; NO FREE BUFFERS
+	RET				; RETURN NZ
+
+GET_CURBUFF:
+	LD	IY, (QUEUE_CMD_WORK)
+	RET
+
+
+TST_PLAYING:				; IF CHANNEL IN A CURRENTLY PLAYING
+					; SCAN BUFFER FOR THIS CHAN
+
+	LD	HL, QUEUE_CMDBUF
+	LD	DE, QUEUED_CMD_SIZE - 1
+	LD	B, QUEUED_CMD_CNT
+	LD	C, A
+
+TST_PLAYING1:
+	LD	A, (HL)
+	AND	AUD_BMPLAY
+	JR	Z, TST_PLAYING2
+
+	INC	HL			; TEST QUEUED_CHAN
+	LD	A, (HL)
+	CP	C
+	JR	NZ, TST_PLAYING2
+
+	RET				; RETURN Z - MATCH FOUND
+
+TST_PLAYING2:
+	ADD	HL, DE
+	DEC	B
+	JR	NZ, TST_PLAYING1
+
+	OR	$FF			; RETURN NZ - MATCH NOT FOUND
+	RET
+
+AUD_BUFFER_INC:				; BUFFER POINTED AT BY HL, IS INCREMENT
+					; AND WRAPPED IF REQUIRED
+	PUSH	AF
+	PUSH	BC
+	PUSH	DE
+	LD	BC, QUEUED_CMD_SIZE
+	ADD	HL, BC
+	PUSH	HL
+	LD	DE, QUEUE_CMDBUFED
+	OR	A                       ; CLEAR CARRY FLAG
+	SBC	HL, DE
+	JR	NC, AUD_WRAP_BUFFER
+	POP	HL
+	JR	AUD_BUFFER_INCRET
+
+AUD_WRAP_BUFFER:
+	POP	HL
+	LD	HL, QUEUE_CMDBUF      ; RESTART AT START OF BUFFERS
+
+AUD_BUFFER_INCRET:
+	POP	DE
+	POP	BC
+	POP	AF
+	RET
+
+AUD_FINDNXT:				; IY NOTE JUST FINISHED
+	LD	D, (IY + QUEUED_CHAN)
+
+	PUSH	IY
+	POP	HL
+	LD	B, QUEUED_CMD_CNT - 1	; LOOP ALL BUT CURRENT ITEM
+
+
+AUD_FINDNXT1:
+	CALL	AUD_BUFFER_INC
+
+	LD	A, (HL)
+	AND	AUD_BMQUEUD
+	JR	Z, AUD_FINDNXT2
+
+	INC	HL
+	LD	A, (HL)
+	DEC	HL
+	CP	D
+	JR	NZ, AUD_FINDNXT2
+
+	PUSH	HL
+	POP	IY
+	XOR	A			; RETURN Z - match
+	RET
+
+
+AUD_FINDNXT2:
+	DEC	B
+	JR	NZ, AUD_FINDNXT1
+
+	OR	$FF			; NOT FOUND
+	RET				; RETURN NZ
+
+; Interrupt handler
+
+AUD_TARNXT:
+	LD	B, BF_SNDVOL
+	LD	C, 0
+	LD	H, 0
+	LD	A, (IY + QUEUED_VOL)
+	LD	L, A
+	CALL	SND_DISPATCH
+
+	LD	B, BF_SNDPIT
+	LD	C, 0
+	LD	L, (IY + QUEUED_PIT)
+	LD	H, (IY + QUEUED_PIT + 1)
+	CALL	SND_DISPATCH
+
+	LD	B, BF_SNDPLAY
+	LD	C, 0
+	LD	D, (IY + QUEUED_CHAN)
+	CALL	SND_DISPATCH
+
+	LD	L, (IY + QUEUED_TAR)		; NEED TO INCREASE DURATION BY 1
+	LD	H, (IY + QUEUED_TAR + 1)	; TO KEEP SYNC WITH TIME CALCULATION.
+	INC	HL				; THIS VALUE WILL BE DECEMENTED
+	LD	(IY + QUEUED_TAR), L		; DURING THE COMPLETION OF THIS TIMER TICK
+	LD	(IY + QUEUED_TAR + 1), H
+
+	JP	AUD_STARTDUR
+
+AUD_TARGET:					; DECREMENT TARGET TIME COUNT
+						; IF 0 STOP SOUND - OR GOTO NEXT SOUND
+	PUSH	DE
+	PUSH	BC
+	PUSH	IY
+
+	LD	L, (IY + QUEUED_TAR)
+	LD	H, (IY + QUEUED_TAR + 1)
+
+	DEC	HL
+	LD	(IY + QUEUED_TAR), L
+	LD	(IY + QUEUED_TAR + 1), H
+	LD	A, H
+	OR	L
+	JR	NZ, AUD_TARGET2
+
+	LD	(IY + QUEUED_FLAGS), AUD_BMFREE
+
+	CALL	AUD_FINDNXT			; INC IY TO NEXT NOTE TO PLAY ON THIS CHAN
+	JR	NZ, AUD_TARGET1			; NONE FOUND, SO STOP SOUND
+
+	CALL	AUD_TARNXT			; START PLAYING NEXT NOTE
+	JR	AUD_TARGET2
+
+AUD_TARGET1:					; TERMINATE SOUND
+	LD	B, BF_SNDVOL
+	LD	C, 0
+	LD	H, 0
+	LD	L, 0
+	CALL	SND_DISPATCH
+
+	LD	B, BF_SNDPLAY
+	LD	C, 0
+	LD	A, (IY + QUEUED_CHAN)
+	LD	D, A
+	CALL	SND_DISPATCH
+
+AUD_TARGET2:
+	POP	IY
+	POP	BC
+	POP	DE
+	RET
+
+AUD_TIMER:
+	PUSH	HL
+	PUSH	IY
+	PUSH	DE
+	PUSH	BC
+	PUSH	AF
+
+	LD	IY, QUEUE_CMDBUF
+	LD	DE, QUEUED_CMD_SIZE
+	LD	B, QUEUED_CMD_CNT
+
+AUD_TIMER1:
+	LD	A, (IY + QUEUED_FLAGS)
+	AND	AUD_BMPLAY
+	CALL	NZ, AUD_TARGET
+
+	ADD	IY, DE
+	DEC	B
+	JR	NZ, AUD_TIMER1
+
+skip:
+	POP	AF
+	POP	BC
+	POP	DE
+	POP	IY
+	POP	HL
+	JP	0				; OVERWRITTEN WITH NEXT HANDLER
+
+NEXTTIMHOOK:	.EQU	$ - 2
+
+; DATA STORAGE
+
+QUEUE_CMDBUF:
+	.FILL	QUEUED_CMD_SIZE * QUEUED_CMD_CNT, 0
+
+QUEUE_CMDBUFED:	.EQU	$
+
+QUEUE_CMD_WORK:
+	.DW	0	; POINTS TO ITEM IN QUEUE_CMDBUF - THE CURRENTLY UNDER CONSTRUCTION CMD
+
+STR_BUFFER_DATA:	.DB	"\r\nBUFFER DATA\r\n$"
+STR_SPACE		.DB	" $"
diff --git a/Source/HBIOS/cfg_dyno.asm b/Source/HBIOS/cfg_dyno.asm
index 8226482..dfe6797 100644
--- a/Source/HBIOS/cfg_dyno.asm
+++ b/Source/HBIOS/cfg_dyno.asm
@@ -157,3 +157,4 @@ UFENABLE	.EQU	FALSE		; UF: ENABLE ECB USB FIFO DRIVER (UF.ASM)
 
 SN76489ENABLE	.EQU	FALSE		; SN76489 SOUND DRIVER
 AUDIOTRACE	.EQU	FALSE		; ENABLE TRACING TO CONSOLE OF SOUND DRIVER
+AUDIOCTRLENABLE	.EQU	FALSE		; AUDIO CONTROL FUNCTIONS
diff --git a/Source/HBIOS/cfg_ezz80.asm b/Source/HBIOS/cfg_ezz80.asm
index 990d2e1..47f29a6 100644
--- a/Source/HBIOS/cfg_ezz80.asm
+++ b/Source/HBIOS/cfg_ezz80.asm
@@ -182,3 +182,4 @@ UFENABLE	.EQU	FALSE		; UF: ENABLE ECB USB FIFO DRIVER (UF.ASM)
 
 SN76489ENABLE	.EQU	FALSE		; SN76489 SOUND DRIVER
 AUDIOTRACE	.EQU	FALSE		; ENABLE TRACING TO CONSOLE OF SOUND DRIVER
+AUDIOCTRLENABLE	.EQU	FALSE		; AUDIO CONTROL FUNCTIONS
diff --git a/Source/HBIOS/cfg_master.asm b/Source/HBIOS/cfg_master.asm
index 264acfd..1a84207 100644
--- a/Source/HBIOS/cfg_master.asm
+++ b/Source/HBIOS/cfg_master.asm
@@ -238,3 +238,4 @@ UFBASE		.EQU	$0C		; UF: REGISTERS BASE ADR
 
 SN76489ENABLE	.EQU	FALSE		; SN76489 SOUND DRIVER
 AUDIOTRACE	.EQU	FALSE		; ENABLE TRACING TO CONSOLE OF SOUND DRIVER
+AUDIOCTRLENABLE	.EQU	FALSE		; AUDIO CONTROL FUNCTIONS
diff --git a/Source/HBIOS/cfg_mk4.asm b/Source/HBIOS/cfg_mk4.asm
index 48fc5ed..3d71500 100644
--- a/Source/HBIOS/cfg_mk4.asm
+++ b/Source/HBIOS/cfg_mk4.asm
@@ -192,3 +192,4 @@ UFBASE		.EQU	$0C		; UF: REGISTERS BASE ADR
 
 SN76489ENABLE	.EQU	FALSE		; SN76489 SOUND DRIVER
 AUDIOTRACE	.EQU	FALSE		; ENABLE TRACING TO CONSOLE OF SOUND DRIVER
+AUDIOCTRLENABLE	.EQU	FALSE		; AUDIO CONTROL FUNCTIONS
diff --git a/Source/HBIOS/cfg_n8.asm b/Source/HBIOS/cfg_n8.asm
index 8080bd4..e6196da 100644
--- a/Source/HBIOS/cfg_n8.asm
+++ b/Source/HBIOS/cfg_n8.asm
@@ -192,3 +192,4 @@ FIFO_BASE	.EQU	$0C		; UF: REGISTERS BASE ADR
 
 SN76489ENABLE	.EQU	FALSE		; SN76489 SOUND DRIVER
 AUDIOTRACE	.EQU	FALSE		; ENABLE TRACING TO CONSOLE OF SOUND DRIVER
+AUDIOCTRLENABLE	.EQU	FALSE		; AUDIO CONTROL FUNCTIONS
diff --git a/Source/HBIOS/cfg_rcz180.asm b/Source/HBIOS/cfg_rcz180.asm
index fcdf9d7..9fee648 100644
--- a/Source/HBIOS/cfg_rcz180.asm
+++ b/Source/HBIOS/cfg_rcz180.asm
@@ -191,3 +191,4 @@ UFENABLE	.EQU	FALSE		; UF: ENABLE ECB USB FIFO DRIVER (UF.ASM)
 
 SN76489ENABLE	.EQU	FALSE		; SN76489 SOUND DRIVER
 AUDIOTRACE	.EQU	FALSE		; ENABLE TRACING TO CONSOLE OF SOUND DRIVER
+AUDIOCTRLENABLE	.EQU	FALSE		; AUDIO CONTROL FUNCTIONS
diff --git a/Source/HBIOS/cfg_rcz80.asm b/Source/HBIOS/cfg_rcz80.asm
index 02a3595..f9b5e86 100644
--- a/Source/HBIOS/cfg_rcz80.asm
+++ b/Source/HBIOS/cfg_rcz80.asm
@@ -197,3 +197,4 @@ UFENABLE	.EQU	FALSE		; UF: ENABLE ECB USB FIFO DRIVER (UF.ASM)
 
 SN76489ENABLE	.EQU	FALSE		; SN76489 SOUND DRIVER
 AUDIOTRACE	.EQU	FALSE		; ENABLE TRACING TO CONSOLE OF SOUND DRIVER
+AUDIOCTRLENABLE	.EQU	FALSE		; AUDIO CONTROL FUNCTIONS
diff --git a/Source/HBIOS/cfg_sbc.asm b/Source/HBIOS/cfg_sbc.asm
index 233103c..a88a206 100644
--- a/Source/HBIOS/cfg_sbc.asm
+++ b/Source/HBIOS/cfg_sbc.asm
@@ -194,3 +194,4 @@ UFBASE		.EQU	$0C		; UF: REGISTERS BASE ADR
 
 SN76489ENABLE	.EQU	FALSE		; SN76489 SOUND DRIVER
 AUDIOTRACE	.EQU	FALSE		; ENABLE TRACING TO CONSOLE OF SOUND DRIVER
+AUDIOCTRLENABLE	.EQU	FALSE		; AUDIO CONTROL FUNCTIONS
diff --git a/Source/HBIOS/cfg_scz180.asm b/Source/HBIOS/cfg_scz180.asm
index 07d679c..6e30b26 100644
--- a/Source/HBIOS/cfg_scz180.asm
+++ b/Source/HBIOS/cfg_scz180.asm
@@ -186,3 +186,4 @@ UFENABLE	.EQU	FALSE		; UF: ENABLE ECB USB FIFO DRIVER (UF.ASM)
 
 SN76489ENABLE	.EQU	FALSE		; SN76489 SOUND DRIVER
 AUDIOTRACE	.EQU	FALSE		; ENABLE TRACING TO CONSOLE OF SOUND DRIVER
+AUDIOCTRLENABLE	.EQU	FALSE		; AUDIO CONTROL FUNCTIONS
diff --git a/Source/HBIOS/cfg_zeta.asm b/Source/HBIOS/cfg_zeta.asm
index 93dcb10..5647ba2 100644
--- a/Source/HBIOS/cfg_zeta.asm
+++ b/Source/HBIOS/cfg_zeta.asm
@@ -137,3 +137,4 @@ UFENABLE	.EQU	FALSE		; UF: ENABLE ECB USB FIFO DRIVER (UF.ASM)
 
 SN76489ENABLE	.EQU	FALSE		; SN76489 SOUND DRIVER
 AUDIOTRACE	.EQU	FALSE		; ENABLE TRACING TO CONSOLE OF SOUND DRIVER
+AUDIOCTRLENABLE	.EQU	FALSE		; AUDIO CONTROL FUNCTIONS
diff --git a/Source/HBIOS/cfg_zeta2.asm b/Source/HBIOS/cfg_zeta2.asm
index e42d050..bc77fad 100644
--- a/Source/HBIOS/cfg_zeta2.asm
+++ b/Source/HBIOS/cfg_zeta2.asm
@@ -147,3 +147,4 @@ UFENABLE	.EQU	FALSE		; UF: ENABLE ECB USB FIFO DRIVER (UF.ASM)
 
 SN76489ENABLE	.EQU	FALSE		; SN76489 SOUND DRIVER
 AUDIOTRACE	.EQU	FALSE		; ENABLE TRACING TO CONSOLE OF SOUND DRIVER
+AUDIOCTRLENABLE	.EQU	FALSE		; AUDIO CONTROL FUNCTIONS
diff --git a/Source/HBIOS/hbios.asm b/Source/HBIOS/hbios.asm
index c3a068e..e8e0220 100644
--- a/Source/HBIOS/hbios.asm
+++ b/Source/HBIOS/hbios.asm
@@ -1663,6 +1663,9 @@ HB_INITTBL:
 #IF (SN76489ENABLE)
 	.DW	SN76489_INIT
 #ENDIF
+#IF (AUDIOCTRLENABLE)
+	.DW	AUDIO_INIT
+#ENDIF
 #IF (ASCIENABLE)
 	.DW	ASCI_INIT
 #ENDIF
@@ -1802,10 +1805,10 @@ HB_DISPCALL:
 	CALL	C,PANIC			; OBSOLETE!
 	CP	BF_VDA + $10		; $40-$4F: VIDEO DISPLAY ADAPTER
 	JP	C,VDA_DISPATCH
-
 	CP	BF_SND + $08		; $50-$58: SOUND DRIVERS
 	JP	C,SND_DISPATCH
-
+	CP	BF_AUD + $08		; $58-$5F: GENERIC AUDIO CONTROL FUNCTIONS
+	JP	C,AUD_DISPATCH
 	CP	BF_SYS			; SKIP TO BF_SYS VALUE AT $F0
 	CALL	C,PANIC			; PANIC IF LESS THAN BF_SYS
 	JP	SYS_DISPATCH		; OTHERWISE SYS CALL
@@ -2232,6 +2235,20 @@ VDA_SIZ		.EQU	VDA_MAX * 4	; EACH ENTRY IS 4 BYTES
 VDA_CNT		.DB	0		; ENTRY COUNT PREFIX
 VDA_TBL		.FILL	VDA_SIZ,0	; SPACE FOR ENTRIES
 
+#IF (!AUDIOCTRLENABLE)
+;
+;==================================================================================================
+;   AUDIO CONTROL FUNCTIONS - IF ENABLED SEE AUDIO.ASM FOR IMPLEMENTATION
+;==================================================================================================
+;
+; ISSUE AUDIO COMMANDS TO INSTALLED SOUND DRIVERS
+;   B: FUNCTION
+;
+AUD_DISPATCH:
+	OR	$FF	; NOT IMPLMENTED
+	RET
+
+#ENDIF
 ;
 ;
 ;==================================================================================================
@@ -3324,6 +3341,14 @@ SIZ_SN76489	.EQU	$ - ORG_SN76489
 		.ECHO	SIZ_SN76489
 		.ECHO	" bytes.\n"
 #ENDIF
+#IF (AUDIOCTRLENABLE)
+ORG_AUDIO	.EQU	$
+  #INCLUDE "audio.asm"
+SIZ_AUDIO	.EQU	$ - ORG_AUDIO
+		.ECHO	"Audio occupies "
+		.ECHO	SIZ_AUDIO
+		.ECHO	" bytes.\n"
+#ENDIF
 ;
 #DEFINE USEDELAY
 #INCLUDE "util.asm"
diff --git a/Source/HBIOS/hbios.inc b/Source/HBIOS/hbios.inc
index 17a9ae2..ad65a9a 100644
--- a/Source/HBIOS/hbios.inc
+++ b/Source/HBIOS/hbios.inc
@@ -66,6 +66,21 @@ BF_SNDQ_CHCNT		.EQU	BF_SNDQ_STATUS + 1	; RETURN COUNT OF CHANNELS
 BF_SNDQ_SVOLUME		.EQU	BF_SNDQ_STATUS + 2	; 8 BIT NUMBER
 BF_SNDQ_SPITCH		.EQU	BF_SNDQ_STATUS + 3	; 16 BIT NUMBER
 ;
+BF_AUD		.EQU	$58
+BF_AUDRESET	.EQU	BF_AUD + 0	; 58 - RESET SOUND SYSTEM
+BF_AUDVOL	.EQU	BF_AUD + 1	; 59 - REQUEST SOUND VOL - L CONTAINS VOLUME (255 MAX, 0 SILENT) - SCALED AS REQUIRED BY DRIVER (EG: MAPS TO JUST 4 BIT RESOLUTION FOR SN76489)
+BF_AUDPIT	.EQU	BF_AUD + 2	; 5A - REQUEST SOUND PITCH - D IS CHANNEL, HL CONTAINS PITCH DRIVER SPECIFIC VALUE
+BF_AUDPLAY	.EQU	BF_AUD + 4	; 5C - INITIATE THE REQUESTED SOUND COMMAND
+BF_AUDQUERY	.EQU	BF_AUD + 5	; 5D - D IS CHANNEL, E IS SUBCOMMAND
+BF_AUDDUR	.EQU	BF_AUD + 6	; 5E - SET CHANNEL DURATION - D IS CHANNEL, HL CONTAINS DURATION IN ?? UNITS
+;
+AUD_STATUS		.EQU	0
+AUD_SFLAGS		.EQU	AUD_STATUS + 0	; CONTROL FLAGS
+AUD_SVOLUME		.EQU	AUD_STATUS + 1	; 8 BIT NUMBER
+AUD_SPITCH		.EQU	AUD_STATUS + 2	; 16 BIT NUMBER
+AUD_SDURATION		.EQU	AUD_STATUS + 3	; 16 BIT NUMBER
+AUD_STARGETTIME		.EQU	AUD_STATUS + 4	; 16 BIT NUMBER - CURRENT COUNT DOWN TO STOP SOUND
+;
 BF_SYS		.EQU	$F0
 BF_SYSRESET	.EQU	BF_SYS + 0	; SOFT RESET HBIOS
 BF_SYSVER	.EQU	BF_SYS + 1	; GET HBIOS VERSION
-- 
2.17.1

